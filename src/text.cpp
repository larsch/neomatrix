/*
 * Neomatrix - Copyright (C) 2017 Lars Christensen
 * MIT Licensed
 *
 * Text Renderer
 */

#include "common.hpp"
#include "text.hpp"
#include "display.hpp"

// Font for ASCII characters 32 to 126 (Tom Thumb font by robey)
// Source: https://robey.lag.net/2010/01/23/tiny-monospace-font.html
// Each character is 4 by 6 pixels and is packed into 3 bytes.
static const uint8_t fontData[] = {
  0x00, 0x00, 0x00, 0x44, 0x40, 0x40, 0xaa, 0x00, 0x00, 0xae, 0xae, 0xa0, 0x6c, 0x6c, 0x40,
  0x82, 0x48, 0x20, 0xcc, 0xea, 0x60, 0x44, 0x00, 0x00, 0x24, 0x44, 0x20, 0x84, 0x44, 0x80,
  0xa4, 0xa0, 0x00, 0x04, 0xe4, 0x00, 0x00, 0x04, 0x80, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x40,
  0x22, 0x48, 0x80, 0x6a, 0xaa, 0xc0, 0x4c, 0x44, 0x40, 0xc2, 0x48, 0xe0, 0xc2, 0x42, 0xc0,
  0xaa, 0xe2, 0x20, 0xe8, 0xc2, 0xc0, 0x68, 0xea, 0xe0, 0xe2, 0x48, 0x80, 0xea, 0xea, 0xe0,
  0xea, 0xe2, 0xc0, 0x04, 0x04, 0x00, 0x04, 0x04, 0x80, 0x24, 0x84, 0x20, 0x0e, 0x0e, 0x00,
  0x84, 0x24, 0x80, 0xe2, 0x40, 0x40, 0x4a, 0xe8, 0x60, 0x4a, 0xea, 0xa0, 0xca, 0xca, 0xc0,
  0x68, 0x88, 0x60, 0xca, 0xaa, 0xc0, 0xe8, 0xe8, 0xe0, 0xe8, 0xe8, 0x80, 0x68, 0xea, 0x60,
  0xaa, 0xea, 0xa0, 0xe4, 0x44, 0xe0, 0x22, 0x2a, 0x40, 0xaa, 0xca, 0xa0, 0x88, 0x88, 0xe0,
  0xae, 0xea, 0xa0, 0xae, 0xee, 0xa0, 0x4a, 0xaa, 0x40, 0xca, 0xc8, 0x80, 0x4a, 0xae, 0x60,
  0xca, 0xec, 0xa0, 0x68, 0x42, 0xc0, 0xe4, 0x44, 0x40, 0xaa, 0xaa, 0x60, 0xaa, 0xa4, 0x40,
  0xaa, 0xee, 0xa0, 0xaa, 0x4a, 0xa0, 0xaa, 0x44, 0x40, 0xe2, 0x48, 0xe0, 0xe8, 0x88, 0xe0,
  0x08, 0x42, 0x00, 0xe2, 0x22, 0xe0, 0x4a, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x84, 0x00, 0x00,
  0x0c, 0x6a, 0xe0, 0x8c, 0xaa, 0xc0, 0x06, 0x88, 0x60, 0x26, 0xaa, 0x60, 0x06, 0xac, 0x60,
  0x24, 0xe4, 0x40, 0x06, 0xae, 0x24, 0x8c, 0xaa, 0xa0, 0x40, 0x44, 0x40, 0x20, 0x22, 0xa4,
  0x8a, 0xcc, 0xa0, 0xc4, 0x44, 0xe0, 0x0e, 0xee, 0xa0, 0x0c, 0xaa, 0xa0, 0x04, 0xaa, 0x40,
  0x0c, 0xaa, 0xc8, 0x06, 0xaa, 0x62, 0x06, 0x88, 0x80, 0x06, 0xc6, 0xc0, 0x4e, 0x44, 0x60,
  0x0a, 0xaa, 0x60, 0x0a, 0xae, 0x40, 0x0a, 0xee, 0xe0, 0x0a, 0x44, 0xa0, 0x0a, 0xa6, 0x24,
  0x0e, 0x6c, 0xe0, 0x64, 0x84, 0x60, 0x44, 0x04, 0x40, 0xc4, 0x24, 0xc0, 0x6c, 0x00, 0x00
};

#define CHAR_BASE 32

static int x;
static int y;

static void plotPixel(char p)
{
  if (x >= 0 && x < 24 && y >= 0 && y < 24) {
    pixel& px = pixels[y * 24 + x];
    uint8_t v = p ? 0x40 : 0x00;
    px.r = p;
    px.g = v >> 1;
    px.b = v >> 4;
  }
}

static void plotDoubleRow(uint8_t data)
{
  plotPixel((data >> 7) & 1);
  ++x;
  plotPixel((data >> 6) & 1);
  ++x;
  plotPixel((data >> 5) & 1);
  ++x;
  plotPixel((data >> 4) & 1);
  x -= 3;
  ++y;
  plotPixel((data >> 3) & 1);
  ++x;
  plotPixel((data >> 2) & 1);
  ++x;
  plotPixel((data >> 1) & 1);
  ++x;
  plotPixel((data >> 0) & 1);
  x -= 3;
  ++y;
}

void mprint(const char* str)
{
  x = 0;
  y = 0;
  for (char ch = *str; ch; ch = *++str) {
    if (ch < CHAR_BASE) {
      continue;
    }
    unsigned int dataOffset = (ch - CHAR_BASE) * 3;
    if (dataOffset + 3u > sizeof(fontData)) {
      continue;
    }
    const uint8_t* data = fontData + dataOffset;
    plotDoubleRow(*data++);
    plotDoubleRow(*data++);
    plotDoubleRow(*data++);
    x += 4;
    y -= 6;
    if (x >= 24) {
      x = 0;
      y += 6;
    }
  }
}
